#ifndef P2P_NODE_H
#define P2P_NODE_H

#include "ns3/applications-module.h"
#include "ns3/core-module.h"
#include "ns3/internet-module.h"
#include "ns3/network-module.h"

#include <memory>
#include <random>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace ns3;

// Share Structure
struct Share
{
    uint32_t originNodeId; 
    uint32_t shareId;     
    double timestamp;      
    std::string ToString() const;
    static Share FromString(const std::string& str);
};

class P2PNode
{
  private:
    uint32_t id;                                          
    std::vector<uint32_t> peers;                         
    Ptr<Socket> serverSocket;                             
    std::mt19937 rng;                                   
    EventId shareEvent;
    bool isrunning;                                  

    std::unordered_set<uint32_t> processedShares;         
    std::unordered_map<uint32_t, Ptr<Socket>> peersockets; 
    uint32_t sharesSent;                                  
    uint32_t sharesReceived;                             
    uint32_t sharesGenerated;                            
    uint32_t sharesForwarded;                            

  public:
    // Constructor - initializes a P2P node with the given ID
    P2PNode(uint32_t id);

    // Sets up the server socket to listen for incoming connections
    void SetupServerSocket(Ptr<Node> node);
    
    // Callback function for handling new connection requests
    void HandleAccept(Ptr<Socket> socket, const Address& from);
    
    // Adds a new peer to this node's list of peers
    void AddPeer(uint32_t peerId);
    
    // Associates a socket with a peer ID for communication
    void AddPeerSocket(uint32_t peerId, Ptr<Socket> socket);
    
    // Begins the share generation process
    void StartGeneratingShares();
    
    // Schedules the next share generation event
    void ScheduleNextShare();
    
    // Creates a new share and gossips it to all connected peers
    void GenerateAndGossipShare();
    
    // Sends a share to all connected peers
    void GossipShareToPeers(const Share& share);
    
    // Processes a received share message from another node
    void ReceiveShare(Share shareMsg, Ptr<Socket> socket, const Address& from);
    
    // Callback function for reading data from a socket
    void HandleRead(Ptr<Socket> socket);

    // Closes all the connections
    void Stop();

    //Unique shareId is generated
    uint32_t GenerateUniqueShareId();

    // Returns the ID of this node
    uint32_t GetId() const;
    
    // Returns the list of peer IDs connected to this node
    const std::vector<uint32_t>& GetPeers() const;
    
    // Returns the number of shares sent by this node
    uint32_t GetSharesSent() const;
    
    // Returns the number of shares received by this node
    uint32_t GetSharesReceived() const;
    
    // Returns the number of shares generated by this node
    uint32_t GetSharesGenerated() const;
    
    // Returns the number of shares forwarded by this node
    uint32_t GetSharesForwarded() const;
    
    // Returns the total number of unique shares processed by this node
    size_t GetProcessedSharesCount() const;
    
    // Returns the number of active socket connections to peers
    size_t GetPeerSocketsCount() const;

};

#endif